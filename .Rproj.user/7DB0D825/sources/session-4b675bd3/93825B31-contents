---
title: "Manipulação de dados e Junção Relacional"
author: 
  - <br></br>Renata Oliveira
output:
  xaringan::moon_reader:
    lib_dir: libs
    css: ["xaringan-themer.css", "slides.css"]
    nature:
      ratio: "16:9"
      highlightLines: true
      highlightStyle: solarized-light
      countIncrementalSlides: false
      slideNumberFormat: |
         <div class="progress-bar-container">
           <div class="progress-bar" style="width: calc(%current% / %total% * 100%);">
           </div>
         </div>

---

```{r child = "setup.Rmd"}
```

```{r packages, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(openintro)
library(kableExtra)
library(knitr)
loans_full_schema <- loans_full_schema %>%
  mutate(grade = factor(grade, ordered = TRUE))
```

```{r xaringan-tile-view, echo=FALSE}
xaringanExtra::use_tile_view()
```

```{r xaringan-editable, echo=FALSE}
xaringanExtra::use_editable(expires = 1)
```

```{r xaringan-panelset, echo=FALSE, message=FALSE, warning=FALSE}
xaringanExtra::use_panelset()
xaringanExtra::style_panelset_tabs(panel_tab_font_family = "sans-serif")
```

```{r xaringanExtra-clipboard, echo=FALSE}
htmltools::tagList(
  xaringanExtra::use_clipboard(
    button_text = "<i class=\"fa fa-clipboard\"></i>",
    success_text = "<i class=\"fa fa-check\" style=\"color: #90BE6D\"></i>",
    error_text = "<i class=\"fa fa-times-circle\" style=\"color: #F94144\"></i>"
  ),
  rmarkdown::html_dependency_font_awesome()
)
```

```{r xaringan-fit-screen, echo=FALSE}
xaringanExtra::use_fit_screen()
```

```{r xaringan-extra-styles, echo=FALSE}
xaringanExtra::use_extra_styles(
  hover_code_line = TRUE,         #<<
  mute_unhighlighted_code = TRUE  #<<
)
```


class: center, middle


## Retrospecto

---

## Operadores aritméticos R

Operador | Descrição
---------|-----------
x + y |	Adição de x com y
x - y	| Subtração de y em x
x * y	| Multiplicação de x e y
x / y	| Divisão de x por y
x^y ou x**y	| x elevado a y-ésima potência
x%%y	| Resto da divisão de x por y (módulo)
x%/%y	| Parte inteira da divisão de x por y

---

## Operadores de comparação no R

Operador	| Significado
----------|------------
==	| igual a
!=	| diferente de
\>	| maior que
<	| menor que
\>=	| maior ou igual a
<=	| menor ou igual a

> Os operadores de comparação sempre retornam um valor lógico TRUE ou FALSE.

---


## Operadores lógicos no R

.small[
Operador|Descrição|Explicação
--------|---------|----------
& |	AND lógico|	Versão vetorizada. Compara dois elementos do tipo vetor e retorna um vetor de TRUEs e FALSEs
&#124;| OR lógico| Versão vetorizada. Compara dois elementos do tipo vetor e retorna um vetor de TRUEs e FALSEs
!	|NOT lógico|Negação lógica. Retorna um valor lógico único ou um vetor de TRUE / FALSE.
]

> Também conhecidos como operadores booleanos, permitem trabalhar com múltiplas condições relacionais na mesma expressão, e retornam valores lógicos verdadeiro ou falso.

---

## Algumas funções estatísticas para sumarização de dados

.pull-left[
Funções | Descrição
--------|----------
`min()`| mínimo  
`max()`| máximo  
`range()`| amplitude   
`mean()`| média   
`sum()`| soma
`median()`| mediana
`sd()`| desvio-padrão
`IQR()`| intervalo interquantil
]

.pull-right[
Funções | Descrição
--------|----------
`quantile()`| quartis
`var()`| variância
`cor()`| correlação
`summary()`| métricas de sumarização
`rowMeans()`| média das linhas
`colMeans()`| média das colunas
`rowSums()`| soma das linhas
`colSums()`| soma das colunas
]
---

## Tratamento de dados omissos
O R permite que sejam armazenados, em vetores e data.frames, o valor `NA` (Not Available), que representa dados que ainda não são conhecidos. 

>`x == NA` trará sempre um resultado FALSE, mesmo que `x` não seja conhecido.


---

class: middle

# .hand[Nós...]

.huge[.green[temos]] .hand[vários data frames]

.huge[.pink[queremos]] .hand[juntá-los]

---

```{r teste, include=FALSE}
professions <- read_csv("data/scientists/professions.csv")
dates <- read_csv("data/scientists/dates.csv")
works <- read_csv("data/scientists/works.csv")
```
## Data: Mulheres nas ciências 

Informações sobre 10 mulheres nas ciências que mudaram o mundo

.small[
```{r echo=FALSE}
professions %>% select(name) %>% kable()
```
]


.footnote[
Source: [Discover Magazine](https://www.discovermagazine.com/the-sciences/meet-10-women-in-science-who-changed-the-world)
]

---

## Entradas



### Profissões

```{r}
professions
```

---

## Entradas
### datas

```{r}
dates
```

---

## Entradas
### trabalhos
```{r}
works
```


---

## Resultado desejado

```{r echo=FALSE}
professions %>%
  left_join(dates) %>%
  left_join(works)
```

---

## Data frames de entrada

.pull-left[
```{r}
names(professions)
names(dates)
names(works)
```
]
.pull-right[
```{r}
nrow(professions)
nrow(dates)
nrow(works)
```
]

---

class: middle

# Junção de data frames

---

## Junção de data frames

```{r eval=FALSE}
something_join(x, y)
```

- `left_join()`: todas as linhas de x
- `right_join()`: todas as linhas de y
- `full_join()`: todas as linhas de x e y
- `semi_join()`: todas as linhas de x onde há valores correspondentes em y, mantendo apenas as linhas de x
- `inner_join()`: todas as linhas de x onde há valores correspondentes em y, retornando toda combinação dos diferentes data frames no caso de múltiplas correspondências 
- `anti_join()`: retorna todas as linhas de x onde não há valores correspondentes em y, sem duplicar linhas em x
- ...
 
---

## Dados

para os próximos slides...

.pull-left[
```{r echo=FALSE}
x <- tibble(
  id = c(1, 2, 3),
  value_x = c("x1", "x2", "x3")
  )
```

```{r}
x
```
]
.pull-right[
```{r echo=FALSE}
y <- tibble(
  id = c(1, 2, 4),
  value_y = c("y1", "y2", "y4")
  )
```

```{r}
y
```
]

---

## `left_join()`

.pull-left[
```{r echo=FALSE, out.width="80%", out.extra ='style="background-color: #FDF6E3"'}
include_graphics("img/left-join.gif")
```
]
.pull-right[
```{r}
left_join(x, y)
```
]

---

## `left_join()`

```{r}
professions %>%
  left_join(dates) #<<
```

---

## `right_join()`

.pull-left[
```{r echo=FALSE, out.width="80%", out.extra ='style="background-color: #FDF6E3"'}
include_graphics("img/right-join.gif")
```
]
.pull-right[
```{r}
right_join(x, y)
```
]

---

## `right_join()`


```{r}
professions %>%
  right_join(dates) #<<
```

---

## `full_join()`

.pull-left[
```{r echo=FALSE, out.width="80%", out.extra ='style="background-color: #FDF6E3"'}
include_graphics("img/full-join.gif")
```
]
.pull-right[
```{r}
full_join(x, y)
```
]

---

## `full_join()`

```{r}
dates %>%
  full_join(works) #<<
```

---

## `inner_join()`

.pull-left[
```{r echo=FALSE, out.width="80%", out.extra ='style="background-color: #FDF6E3"'}
include_graphics("img/inner-join.gif")
```
]
.pull-right[
```{r}
inner_join(x, y)
```
]

---

## `inner_join()`

```{r}
dates %>%
  inner_join(works) #<<
```

---

## `semi_join()`

.pull-left[
```{r echo=FALSE, out.width="80%", out.extra ='style="background-color: #FDF6E3"'}
include_graphics("img/semi-join.gif")
```
]
.pull-right[
```{r}
semi_join(x, y)
```
]

---

## `semi_join()`

```{r}
dates %>%
  semi_join(works) #<<
```

---

## `anti_join()`

.pull-left[
```{r echo=FALSE, out.width="80%", out.extra ='style="background-color: #FDF6E3"'}
include_graphics("img/anti-join.gif")
```
]
.pull-right[
```{r}
anti_join(x, y)
```
]

---

## `anti_join()`

```{r}
dates %>%
  anti_join(works) #<<
```

---

## Realizando a junção dos dados

```{r}
professions %>%
  left_join(dates) %>%
  left_join(works)
```

---

class: middle

# Estudo de caso: dados de estudantes

---

## Dados de estudantes

- Temos:
  - Enrolment: dados oficiais de matrícula da universidade
  - Survey: dados coletados junto aos estudantes sobre as disciplinas que estão cursando
- Want: Resultados da pesquisa considerando informações de todos alunos matriculados

--

```{r include=FALSE}
enrolment <- read_csv("data/students/enrolment.csv")
survey <- read_csv("data/students/survey.csv")
```

.pull-left[
```{r message = FALSE}
enrolment
```
]
.pull-right[
```{r message = FALSE}
survey
```
]

---

## Dados dos estudantes


### Em classes
```{r}
enrolment %>% 
  left_join(survey, by = "id") #<<
```

---

## Dados dos estudantes

### Pesquisa direta
```{r}
enrolment %>% 
  anti_join(survey, by = "id") #<<
```

---

## Dados dos estudantes

### Abandonaram as disciplinas
```{r}
survey %>% 
  anti_join(enrolment, by = "id") #<<
```




---

class: middle

# Estudo de caso: venda de alimentos

---

## Vendas de alimentos

- Temos:
  - Purchases: Uma linha por consumidor, por item.
  - Prices: uma linha por item na loja
- Want: receita total

--

```{r include=FALSE}
purchases <- read_csv("data/sales/purchases.csv")
prices <- read_csv("data/sales/prices.csv")
```

.pull-left[
```{r message = FALSE}
purchases
```
]
.pull-right[
```{r message = FALSE}
prices
```
]

---

## Venda de alimentos - receita total


.pull-left[
```{r}
purchases %>% 
  left_join(prices) #<<
```
]
.pull-right[
```{r}
purchases %>% 
  left_join(prices) %>%
  summarise(total_revenue = sum(price)) #<<
```
]


---

## Receita por consumidor

.pull-left[
```{r}
purchases %>% 
  left_join(prices)
```
]
.pull-right[
```{r}
purchases %>% 
  left_join(prices) %>%
  group_by(customer_id) %>% #<<
  summarise(total_revenue = sum(price))
```
]

---

class: middle


#DÚVIDAS?

